{"ast":null,"code":"var _jsxFileName = \"/Users/achraf/Downloads/projet-web-barakat_elmaghnaouy_sait_badreddine-UI/src/payment-frontend/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport CheckoutForm from './CheckoutForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('pk_test_51Qg8EpKD44DTCNGUGEvR5q7FRSWV00VP78Hek0KRZvnupim45MjNXjVDXk5RJ8ElGmDRzAGc2NQah122Naz1ZvJ600EUcRB7nP'); // Replace with your Stripe Publishable Key\n\nconst Checkout = () => {\n  _s();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const isFetched = useRef(false); // Persistent reference to track if the API has been called\n\n  // Fetch clientSecret from the backend\n  useEffect(() => {\n    if (isFetched.current) return; // Prevent duplicate fetches\n    isFetched.current = true;\n    fetch(\"http://localhost:8005/api/payments/create\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        amount: 5000,\n        currency: \"usd\"\n      }) // Example amount ($50)\n    }).then(res => res.json()).then(data => {\n      console.log(\"Client Secret received:\", data.clientSecret);\n      setClientSecret(data.clientSecret);\n    }).catch(error => {\n      console.error(\"Error fetching client secret:\", error); // Log errors\n    });\n  }, []);\n  const options = {\n    clientSecret\n  };\n  return clientSecret ? /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripePromise,\n    options: options,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Checkout, \"03BiBhjhPixA3/MAybFnYmEs+/I=\");\n_c = Checkout;\nexport default Checkout;\nvar _c;\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Elements","loadStripe","CheckoutForm","jsxDEV","_jsxDEV","stripePromise","Checkout","_s","clientSecret","setClientSecret","isFetched","current","fetch","method","headers","body","JSON","stringify","amount","currency","then","res","json","data","console","log","catch","error","options","stripe","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/achraf/Downloads/projet-web-barakat_elmaghnaouy_sait_badreddine-UI/src/payment-frontend/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport CheckoutForm from './CheckoutForm';\n\nconst stripePromise = loadStripe('pk_test_51Qg8EpKD44DTCNGUGEvR5q7FRSWV00VP78Hek0KRZvnupim45MjNXjVDXk5RJ8ElGmDRzAGc2NQah122Naz1ZvJ600EUcRB7nP'); // Replace with your Stripe Publishable Key\n\nconst Checkout = () => {\n    const [clientSecret, setClientSecret] = useState(\"\");\n    const isFetched = useRef(false); // Persistent reference to track if the API has been called\n\n    // Fetch clientSecret from the backend\n    useEffect(() => {\n        if (isFetched.current) return; // Prevent duplicate fetches\n        isFetched.current = true;\n\n        fetch(\"http://localhost:8005/api/payments/create\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ amount: 5000, currency: \"usd\" }), // Example amount ($50)\n        })\n            .then((res) => res.json())\n            .then((data) => {\n                console.log(\"Client Secret received:\", data.clientSecret);\n                setClientSecret(data.clientSecret);\n            })\n            .catch((error) => {\n                console.error(\"Error fetching client secret:\", error); // Log errors\n            });\n    }, []);\n\n    const options = {\n        clientSecret,\n    };\n\n    return clientSecret ? (\n        <Elements stripe={stripePromise} options={options}>\n            <CheckoutForm />\n        </Elements>\n    ) : (\n        <div>Loading...</div>\n    );\n};\n\nexport default Checkout;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,aAAa,GAAGJ,UAAU,CAAC,6GAA6G,CAAC,CAAC,CAAC;;AAEjJ,MAAMK,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMa,SAAS,GAAGX,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEjC;EACAD,SAAS,CAAC,MAAM;IACZ,IAAIY,SAAS,CAACC,OAAO,EAAE,OAAO,CAAC;IAC/BD,SAAS,CAACC,OAAO,GAAG,IAAI;IAExBC,KAAK,CAAC,2CAA2C,EAAE;MAC/CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAE,IAAI;QAAEC,QAAQ,EAAE;MAAM,CAAC,CAAC,CAAE;IAC7D,CAAC,CAAC,CACGC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACZC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,IAAI,CAACf,YAAY,CAAC;MACzDC,eAAe,CAACc,IAAI,CAACf,YAAY,CAAC;IACtC,CAAC,CAAC,CACDkB,KAAK,CAAEC,KAAK,IAAK;MACdH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,OAAO,GAAG;IACZpB;EACJ,CAAC;EAED,OAAOA,YAAY,gBACfJ,OAAA,CAACJ,QAAQ;IAAC6B,MAAM,EAAExB,aAAc;IAACuB,OAAO,EAAEA,OAAQ;IAAAE,QAAA,eAC9C1B,OAAA,CAACF,YAAY;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC,gBAEX9B,OAAA;IAAA0B,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CACvB;AACL,CAAC;AAAC3B,EAAA,CAnCID,QAAQ;AAAA6B,EAAA,GAAR7B,QAAQ;AAqCd,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}